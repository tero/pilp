'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _queryString = require('query-string');

var _queryString2 = _interopRequireDefault(_queryString);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _component = require('./component');

var _component2 = _interopRequireDefault(_component);

var _devtools = require('./devtools');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _window = window;
var WebSocket = _window.WebSocket;
var location = _window.location;
var history = _window.history;
exports.default = (0, _component2.default)({
  _hsrUrl: function _hsrUrl() {
    var port = process.env.PORT;
    var host = process.env.HOST;

    return 'http://' + host + ':' + port + '/__hsr__';
  },
  componentWillMount: function componentWillMount() {
    var _this = this;

    var client = new WebSocket(process.env.HSR_WS, 'echo-protocol');

    client.onclose = function () {
      console.warn('HSR connection closed');
    };

    client.onerror = function () {
      console.error('HSR connection error');
    };

    client.onopen = function () {
      var params = _queryString2.default.parse(location.search);

      if (params.hsr) {
        var ts = params.hsr;
        delete params.hsr;

        var newParams = _queryString2.default.stringify(params);
        var newUrl = location.href.substring(0, location.href.indexOf('?')) + (newParams.length ? '?' + newParams : '');

        history.replaceState(null, null, newUrl);

        _axios2.default.get(_this._hsrUrl() + '/' + ts).then(function (res) {
          setTimeout(function () {
            (0, _devtools.setDevToolsState)(res.data);
          }, 1);
          console.info('HSR data loaded');
        }).catch(function (err) {
          return console.error(err);
        });
      }

      console.info('HSR is ready');
    };

    client.onmessage = function (e) {
      var payload = JSON.parse(e.data);

      if (payload.type === 'refresh') {
        var state = (0, _devtools.getDevToolsState)();

        _axios2.default.post(_this._hsrUrl(), { state: state }).then(function (res) {
          var params = _queryString2.default.parse(location.search);
          params.hsr = res.data.ts;

          location.search = _queryString2.default.stringify(params);
        }).catch(function (err) {
          return console.error(err);
        });
      }

      if (payload.type === 'styles') {
        (function () {
          var allLinks = Array.from(document.getElementsByTagName('link'));
          var urlReg = new RegExp(escapeRegExp(payload.url) + '(?:\\?[0-9]+)?$', 'g');
          var link = allLinks.find(function (e) {
            return e.href.match(urlReg);
          });

          var newLink = document.createElement('link');
          newLink.type = 'text/css';
          newLink.rel = 'stylesheet';
          newLink.href = link.href.replace(location.origin, '').replace(/\?[0-9]+/, '') + ('?' + Date.now());

          document.head.appendChild(newLink);

          console.info('Styles Updated');

          var vars = 'sheet' in newLink ? ['sheet', 'cssRules'] : ['styleSheet', 'rules'];
          var isLoaded = setInterval(function () {
            if (newLink[vars[0]] && newLink[vars[0]][vars[1]].length) {
              link && link.remove();
              clearInterval(isLoaded);
            }
          }, 10);
        })();
      }
    };
  },
  render: function render() {
    return null;
  }
});


function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}