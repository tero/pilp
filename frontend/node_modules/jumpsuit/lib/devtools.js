'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDevToolsState = exports.getDevToolsState = exports.devTools = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reduxDevtools = require('redux-devtools');

var DevTools = _interopRequireWildcard(_reduxDevtools);

var _reduxDevtoolsLogMonitor = require('redux-devtools-log-monitor');

var _reduxDevtoolsLogMonitor2 = _interopRequireDefault(_reduxDevtoolsLogMonitor);

var _reduxDevtoolsDockMonitor = require('redux-devtools-dock-monitor');

var _reduxDevtoolsDockMonitor2 = _interopRequireDefault(_reduxDevtoolsDockMonitor);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var devTools = exports.devTools = DevTools;
var getDevToolsState = exports.getDevToolsState = function getDevToolsState() {};
var setDevToolsState = exports.setDevToolsState = function setDevToolsState() {};

var JumpsuitDockMonitor = function (_DockMonitor) {
  _inherits(JumpsuitDockMonitor, _DockMonitor);

  function JumpsuitDockMonitor() {
    _classCallCheck(this, JumpsuitDockMonitor);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(JumpsuitDockMonitor).apply(this, arguments));
  }

  _createClass(JumpsuitDockMonitor, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      _get(Object.getPrototypeOf(JumpsuitDockMonitor.prototype), 'componentDidMount', this).call(this);

      console.info('Dev Tools: Press ctrl+h to toggle and ctrl+p to change position');

      exports.getDevToolsState = getDevToolsState = function getDevToolsState() {
        return _this2.props.store.getState();
      };
      exports.setDevToolsState = setDevToolsState = function setDevToolsState(state) {
        return _this2.props.dispatch({
          type: 'IMPORT_STATE',
          nextLiftedState: state,
          noRecompute: true
        });
      };
    }
  }]);

  return JumpsuitDockMonitor;
}(_reduxDevtoolsDockMonitor2.default);

exports.default = DevTools.createDevTools(_react2.default.createElement(
  JumpsuitDockMonitor,
  {
    toggleVisibilityKey: 'ctrl-h',
    changePositionKey: 'ctrl-p',
    defaultIsVisible: false },
  _react2.default.createElement(_reduxDevtoolsLogMonitor2.default, { theme: 'tomorrow' })
));