'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STORE = undefined;
exports.Middleware = Middleware;
exports.combine = combine;
exports.getDevToolsState = getDevToolsState;
exports.setDevToolsState = setDevToolsState;

var _redux = require('redux');

var _reactRouterRedux = require('react-router-redux');

var _reactRouter = require('react-router');

var _reduxThunk = require('redux-thunk');

var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var userMiddleware = [];

function Middleware() {
  for (var _len = arguments.length, newMiddleware = Array(_len), _key = 0; _key < _len; _key++) {
    newMiddleware[_key] = arguments[_key];
  }

  userMiddleware = [].concat(_toConsumableArray(userMiddleware), newMiddleware);
}

var STORE = exports.STORE = void 0;

function combine(states) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var nativeMiddleware = _redux.applyMiddleware.apply(undefined, [_reduxThunk2.default, (0, _reactRouterRedux.routerMiddleware)(options.useHash ? _reactRouter.hashHistory : _reactRouter.browserHistory)].concat(_toConsumableArray(userMiddleware)));
  var enhancers = [nativeMiddleware];

  if (process.env.NODE_ENV !== 'production') {
    var devTools = require('./devtools');
    var devToolsExtension = devTools.default.instrument({
      maxAge: Number(process.env.HSR_MAX_AGE),
      shouldCatchErrors: Boolean(process.env.HSR_SHOULD_CATCH_ERRORS)
    });
    enhancers.push(devToolsExtension);
  }

  var enhancer = _redux.compose.apply(undefined, enhancers);
  var rootReducer = (0, _redux.combineReducers)(states);

  var store = (0, _redux.createStore)(rootReducer, enhancer);
  exports.STORE = STORE = store;

  var _loop = function _loop(i) {
    states[i].dispatch = store.dispatch;
    states[i].getState = function (stateName) {
      if (stateName === true) return store.getState();
      return store.getState()[states[i]._name];
    };
  };

  for (var i in states) {
    _loop(i);
  }

  return store;
}

function getDevToolsState() {}
function setDevToolsState() {}